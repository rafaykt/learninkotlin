// Generated by view binder compiler. Do not edit!
package me.rafael.yokota.androidApp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.rafael.yokota.androidApp.R;

public final class RowItemWeatherBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView dateWeather;

  @NonNull
  public final TextView description;

  @NonNull
  public final ConstraintLayout forecast1;

  @NonNull
  public final ImageView icon;

  @NonNull
  public final TextView minimax;

  private RowItemWeatherBinding(@NonNull ConstraintLayout rootView, @NonNull TextView dateWeather,
      @NonNull TextView description, @NonNull ConstraintLayout forecast1, @NonNull ImageView icon,
      @NonNull TextView minimax) {
    this.rootView = rootView;
    this.dateWeather = dateWeather;
    this.description = description;
    this.forecast1 = forecast1;
    this.icon = icon;
    this.minimax = minimax;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RowItemWeatherBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RowItemWeatherBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.row_item_weather, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RowItemWeatherBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.date_weather;
      TextView dateWeather = rootView.findViewById(id);
      if (dateWeather == null) {
        break missingId;
      }

      id = R.id.description;
      TextView description = rootView.findViewById(id);
      if (description == null) {
        break missingId;
      }

      ConstraintLayout forecast1 = (ConstraintLayout) rootView;

      id = R.id.icon;
      ImageView icon = rootView.findViewById(id);
      if (icon == null) {
        break missingId;
      }

      id = R.id.minimax;
      TextView minimax = rootView.findViewById(id);
      if (minimax == null) {
        break missingId;
      }

      return new RowItemWeatherBinding((ConstraintLayout) rootView, dateWeather, description,
          forecast1, icon, minimax);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
